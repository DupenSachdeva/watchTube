// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  name         String    @unique
  email        String    @unique
  password     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  channel      Channel   @relation(fields: [channelId], references: [id])
  channelId    Int       @unique

  subscriptions Channel[] @relation("UserSubscriptions")

  videos       Video[]
}

model Channel {
  id                 Int       @id @default(autoincrement())
  channelName        String    @unique
  channelDescription String
  picture            String
  about              String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  subscribers        Int       @default(0)
  
  user               User?

  subscribedByUsers  User[]    @relation("UserSubscriptions")

  comments Comment[]
}


enum Visibility{
   Public
   Private
   Unlisted
}

enum Category{
  Entertainment
  Education
  ScienceandTechnology
  Music
  Gaming

}
model Video{
  
  id Int @id @default(autoincrement())

  title String
  description String
  visibility Visibility @default(Public)
  
  thumbnailUrl String?
  hlsUrl String?



  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  

  tags String[]
  ageRestriction Boolean @default(false)
  monetization Boolean @default(false)
  premiere DateTime?  

  user User @relation(fields: [userId],references: [id])
  userId Int
}


model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  videoId   Int

  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")

  likes Int @default(0)
  dislikes Int @default(0)
  
  channel   Channel  @relation(fields: [channelId], references: [id])


  channelId Int 
  parentId  Int?      

  createdAt DateTime  @default(now())
}
